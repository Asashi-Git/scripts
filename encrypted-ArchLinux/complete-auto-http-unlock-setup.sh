#!/bin/bash
# complete_auto_unlock_setup.sh - Complete auto-unlock HTTP partition setup
# Educational purpose: One-script solution for automated partition decryption
# Version: 1.0

set -e

# Configuration - Modifiez ces valeurs selon votre environnement
ENCRYPTED_DEVICE="/dev/vg0/httpdata"
CRYPT_NAME="crypthttp"
KEYFILE_PATH="/etc/luks-keys/httpdata.key"
MOUNT_POINT="/data/http"
SCRIPT_PATH="/usr/local/bin/auto-unlock-http.sh"
SERVICE_FILE="/etc/systemd/system/auto-unlock-http.service"
TIMER_FILE="/etc/systemd/system/auto-unlock-http.timer"
LOG_FILE="/var/log/auto-unlock-http.log"

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

print_status() {
  echo -e "${1}${2}${NC}"
}

print_step() {
  echo ""
  print_status $BLUE "=== $1 ==="
}

print_status $BLUE "Complete Auto-Unlock HTTP Partition Setup - Version 1.0"
print_status $YELLOW "This script will setup automatic HTTP partition decryption"

# Check root
if [[ $EUID -ne 0 ]]; then
  print_status $RED "Error: This script must be run as root"
  exit 1
fi

# Check if encrypted device exists
if [[ ! -e "$ENCRYPTED_DEVICE" ]]; then
  print_status $RED "Error: Encrypted device $ENCRYPTED_DEVICE not found"
  print_status $YELLOW "Available devices:"
  lsblk
  exit 1
fi

print_status $GREEN "✓ Pre-flight checks passed"

# Step 1: Create keyfile
print_step "Creating LUKS keyfile"

mkdir -p /etc/luks-keys
chmod 700 /etc/luks-keys

if [[ -f "$KEYFILE_PATH" ]]; then
  print_status $YELLOW "WARNING: Keyfile already exists at $KEYFILE_PATH"
  read -p "Overwrite? (y/N): " -n 1 -r
  echo
  [[ ! $REPLY =~ ^[Yy]$ ]] && {
    print_status $RED "Aborted"
    exit 1
  }
fi

dd if=/dev/urandom of="$KEYFILE_PATH" bs=512 count=1
chmod 600 "$KEYFILE_PATH"
chown root:root "$KEYFILE_PATH"
print_status $GREEN "✓ Keyfile created: $KEYFILE_PATH"

# Add keyfile to LUKS
print_status $YELLOW "Adding keyfile to LUKS (you'll need to enter your current password):"
if ! cryptsetup luksAddKey "$ENCRYPTED_DEVICE" "$KEYFILE_PATH"; then
  print_status $RED "Failed to add keyfile to LUKS"
  rm -f "$KEYFILE_PATH"
  exit 1
fi

# Test keyfile
#if cryptsetup open "$ENCRYPTED_DEVICE" "test-$CRYPT_NAME" --key-file="$KEYFILE_PATH"; then
#  cryptsetup close "test-$CRYPT_NAME"
#  print_status $GREEN "✓ Keyfile test successful"
#else
#  print_status $RED "Keyfile test failed"
#  exit 1
#fi

# Step 2: Create auto-unlock script
print_step "Creating auto-unlock script"

cat >"$SCRIPT_PATH" <<'EOF'
#!/bin/bash
# auto-unlock-http.sh - Auto-unlock HTTP data partition
# Generated by complete_auto_unlock_setup.sh

ENCRYPTED_DEVICE="/dev/vg0/httpdata"
CRYPT_NAME="crypthttp" 
KEYFILE_PATH="/etc/luks-keys/httpdata.key"
MOUNT_POINT="/data/http"
LOG_FILE="/var/log/auto-unlock-http.log"

log_msg() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" | tee -a "$LOG_FILE"
}

log_msg "=== Starting HTTP partition auto-unlock ==="

# Check if already mounted
if mountpoint -q "$MOUNT_POINT"; then
    log_msg "Already mounted, checking nginx..."
    systemctl is-active --quiet nginx || systemctl start nginx
    log_msg "Process completed (already mounted)"
    exit 0
fi

# Unlock partition
if [[ ! -e "/dev/mapper/$CRYPT_NAME" ]]; then
    log_msg "Unlocking partition..."
    if ! cryptsetup open "$ENCRYPTED_DEVICE" "$CRYPT_NAME" --key-file="$KEYFILE_PATH"; then
        log_msg "ERROR: Failed to unlock partition"
        exit 1
    fi
    log_msg "✓ Partition unlocked"
fi

# Create mount point
mkdir -p "$MOUNT_POINT"

# Mount partition
log_msg "Mounting partition..."
if ! mount "/dev/mapper/$CRYPT_NAME" "$MOUNT_POINT"; then
    log_msg "ERROR: Failed to mount partition"
    cryptsetup close "$CRYPT_NAME"
    exit 1
fi

# Set permissions
chown sam:http "$MOUNT_POINT"
chmod 750 "$MOUNT_POINT"
log_msg "✓ Permissions set"

# Restart nginx
log_msg "Restarting nginx..."
if nginx -t && systemctl restart nginx; then
    log_msg "✓ Nginx restarted successfully"
else
    log_msg "ERROR: Nginx restart failed"
    exit 1
fi

log_msg "=== Auto-unlock completed successfully ==="
EOF

chmod +x "$SCRIPT_PATH"
print_status $GREEN "✓ Auto-unlock script created: $SCRIPT_PATH"

# Step 3: Create systemd service
print_step "Creating systemd service and timer"

cat >"$SERVICE_FILE" <<EOF
[Unit]
Description=Auto-unlock HTTP Data Partition
After=multi-user.target lvm2-monitor.service
Requires=lvm2-monitor.service

[Service]
Type=oneshot
ExecStart=$SCRIPT_PATH
User=root
StandardOutput=journal
StandardError=journal
TimeoutStartSec=120

[Install]
WantedBy=multi-user.target
EOF

cat >"$TIMER_FILE" <<'EOF'
[Unit]
Description=Auto-unlock HTTP Data Partition Timer
Requires=auto-unlock-http.service

[Timer]
OnBootSec=30s
Persistent=false
Unit=auto-unlock-http.service

[Install]
WantedBy=timers.target
EOF

chmod 644 "$SERVICE_FILE" "$TIMER_FILE"
print_status $GREEN "✓ Systemd files created"

# Step 4: Enable and start timer
print_step "Configuring systemd"

systemctl daemon-reload
systemctl enable auto-unlock-http.timer
systemctl start auto-unlock-http.timer

print_status $GREEN "✓ Timer enabled and started"

# Step 5: Test the setup
print_step "Testing setup"

# If currently mounted, unmount for test
if mountpoint -q "$MOUNT_POINT"; then
  umount "$MOUNT_POINT"
  [[ -e "/dev/mapper/$CRYPT_NAME" ]] && cryptsetup close "$CRYPT_NAME"
fi

# Run the script manually
print_status $YELLOW "Running manual test..."
if "$SCRIPT_PATH"; then
  print_status $GREEN "✓ Manual test successful"
else
  print_status $RED "✗ Manual test failed"
  exit 1
fi

# Verify results
if mountpoint -q "$MOUNT_POINT" && systemctl is-active --quiet nginx; then
  print_status $GREEN "✓ All tests passed!"
else
  print_status $RED "✗ Verification failed"
  exit 1
fi

# Final summary
print_step "Setup Complete!"

print_status $GREEN "✓ Keyfile created and added to LUKS"
print_status $GREEN "✓ Auto-unlock script installed"
print_status $GREEN "✓ Systemd timer configured (30s after boot)"
print_status $GREEN "✓ Setup tested successfully"

echo ""
print_status $BLUE "Files created:"
echo "  - Keyfile: $KEYFILE_PATH"
echo "  - Script: $SCRIPT_PATH"
echo "  - Service: $SERVICE_FILE"
echo "  - Timer: $TIMER_FILE"
echo "  - Log: $LOG_FILE"

echo ""
print_status $BLUE "Useful commands:"
echo "  - Check timer: systemctl status auto-unlock-http.timer"
echo "  - View logs: tail -f $LOG_FILE"
echo "  - Manual run: $SCRIPT_PATH"
echo "  - Disable: systemctl disable auto-unlock-http.timer"

echo ""
print_status $YELLOW "Your HTTP partition will now unlock automatically 30 seconds after boot!"
print_status $YELLOW "Reboot to test the complete automation."
